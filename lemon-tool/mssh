#!/usr/bin/python3
from __future__ import print_function

import argparse
import os, time
import re
import signal
import socket
import subprocess
from operator import itemgetter
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from threading import Timer

HOME = os.getenv('HOME', None)
ISILON = os.getenv('ISILON', None)

SSH_HOSTS = HOME + "/.sshhosts"
ISILON_USRE = "lmao"
MAX_HOST_LEN = 50
MAX_NAME_LEN = 30

def bold_green_fmt(value):
    return "\033[1m\033[32m{0}\033[m".format(value)

def bold_cyan_fmt(value):
    return "\033[1m\033[36m{0}\033[m".format(value)

def bold_fmt(value):
    return "\033[1m{0}\033[m".format(value)

def bold_red_fmt(value):
    return "\033[1m\033[31m{0}\033[m".format(value)

def red_fmt(value):
    return "\033[31m{0}\033[m".format(value)

def error_msg(msg):
    print("{0} {1}".format(bold_red_fmt("Error:"), red_fmt(msg)))

def is_wildcard(pattern):
  """
  This function checks if a string is likely a shell wildcard pattern.
  """
  wildcards = "*?"
  # Check for presence of wildcard characters
  if any(char in wildcards for char in pattern):
    return True
  # Handle cases like ".bashrc" (not a wildcard)
  if pattern.startswith(".") and not pattern.startswith(".*"):
    return False

  # Consider patterns with escaped characters (not reliable)
  # This is a simplified approach and might not capture all edge cases.
  escape_chars = "\\"
  if any(char in escape_chars for char in pattern):
    return False

  return False

def get_customed_machines():
    """Get list of remote servers from file ~/.sshhosts
    #cat ~/.sshhosts
    10.224.38.228                          Test manager
    qavm01.prod.sea1.west.isilon.com       Sea1 qaVM
    """
    # if SSH_HOSTS file not exist or empty, create it.
    # And write the example above to it.
    if not os.path.exists(SSH_HOSTS) or os.stat(SSH_HOSTS).st_size == 0:
        with open(SSH_HOSTS, "w") as hostfile:
            host_spaces = " " * (MAX_HOST_LEN - 1)
            hostfile.write(
                    "# Start with '#' will be considered as comment.\n#\n"
                    "# IPs(<user>@<ip/domain>)                   Machine name(no space in name)            Information of machine(can include space)\n#\n"
                    "#  2.2.2.2,lmao@1.1.1.1                           my_server                                 Test server\n"
                    "#  lmao@test.lemon.com                            isi_debug                                 Sea1 qaVM\n"
            )

    hosts = []
    # print("hosts file:{0}".format(SSH_HOSTS))
    with open(SSH_HOSTS, "r") as hostfile:
        i = 0
        for line in hostfile.readlines():
            # if line is start with '#' or empty line, continue
            if line.startswith('#') or not line.strip():
                continue
            host = {}
            host["id"] = i
            i += 1
            host["ips"] = line.split(' ', 1)[0].split(',', 1)
            host["name"] = line.split(' ', 1)[1].strip().split(' ', 1)[0]
            host["location"] = line.split(' ', 1)[1].strip().split(' ', 1)[1].strip()
            host["build"] = 'N/A'
            hosts.append(host)

    return hosts

def get_isilon_machines(what="Cluster"):
    """Get a list of ducttape clusters."""
    import isilon.ducttape.client as dt
    try:
        user = ISILON_USRE
        # if user is None:
            # user = input(
                # "Enter your DESKTOP username to pick a Ducttape IP (empty to skip): ").strip()

        client = dt.DucttapeClient(user)
        if what == "Clients":
            return client.get_clients(owner=user)
        else:
            return client.get_clusters(owner=user)
    except Exception as e:
        error_msg("Failed to get Ducttape clsuters: {0}".format(e))
        print("Continuing without displaying Ducttape clusters...")
        return None

def choose_cluster_ip(cluster, ip=None):
    """Choose the ducttape IP to use."""
    if ip is None:
        if not cluster["ips"]:
            error_msg("Cluster: {0} does not have any IPs".format(cluster["name"]))
            return None
        ip = cluster["ips"][0]
    return ip

def get_machine_ip(target=None, just_print=False):
    """Get the node IP to use for the cross compiler."""
    idx_wrap = [0]

    def get_digits(num):
        digits = 1
        num = num // 10
        while num != 0:
            digits += 1
            num = num // 10
        return digits

    def next_num():
        idx_wrap[0] += 1
        return idx_wrap[0]

    def current_num():
        return idx_wrap[0]

    idx_to_machine = {}
    name_to_machine = {}
    all_machines = {}

    if ISILON:
        all_machines["Ducttape Cluster"] = get_isilon_machines("Cluster")
        all_machines["Ducttape Clients"] = get_isilon_machines("Clients")

    all_machines["Servers"] = get_customed_machines()

    for typestr, servers in all_machines.items():
        # type string
        print("# {0}:\n".format(typestr))
        servers= sorted(servers, key=itemgetter("id"))
        for vm in servers:
            # vm name
            print("  ({0}) {1}".format(bold_green_fmt(next_num()), vm["name"]))
            idx_to_machine[current_num()] = { "machine": vm }
            name_to_machine[vm["name"]] = idx_to_machine[current_num()]

            # vm info - location, build
            spaces = " " * get_digits(idx_wrap[0])
            if vm["location"]:
                print("     {2}Info: {0}  --  {1}".format(
                    vm["location"], vm["build"], spaces))

            current = current_num()
            # vm["ips"].reverse()
            print("     {1}IPs:      {0}".format(
                ", ".join(["({0}) {1}".format(bold_cyan_fmt(next_num()), ip) for ip in vm["ips"]])
                , spaces))

            for id_num, ip in enumerate(vm["ips"], current+1):
                idx_to_machine[id_num] = { "machine": vm, "ip": ip }
                name_to_machine[vm["name"]] = idx_to_machine[id_num]

            print("")

    if just_print:
        exit(0)

    while True:
        answer = target if target else input(
                "Enter a IP or target for SSH login: ").strip()

        try:
            info = None
            if answer.isnumeric():
                idx = int(answer, 10)
                info = idx_to_machine[idx]
            else:
                info = name_to_machine[answer]

            ip = choose_cluster_ip(info["machine"], ip=info.get("ip"))
            if ip:
                return ip
        except (ValueError, KeyError):
            error_msg("{0} is not a valid choice".format(answer))

def add_custom_host(host):
    """ if host exists, find if it exist in SSH_HOSTS file, if not add it. """
    servers = get_customed_machines()
    found = False
    for server in servers:
        if host in server["ips"]:
            found = True
            break
    if not found:
        name = input("Provide the machine name: ").strip()
        info = input("Provide the machine info: ").strip()
        print(f"info:{info}")
        info = "N/A" if not info else info
        with open(SSH_HOSTS, "a+") as hostfile:
            space1 = " " * (MAX_HOST_LEN - len(host))
            space2 = " " * (MAX_NAME_LEN - len(name))
            hostfile.write(host + space1 + name + space2 + info + "\n")

def do_sftp(ip, user, path):
    if path == "lmao_sftp_prompt":
        path = input("SFTP path: ").strip()
    cmd = f"sftp {user}@{ip}:{path}"
    print(f"Perform SFTP: {cmd}")
    os.system(cmd)

def need_passwd(error_msg):
    need_pass_err = ["Permission denied (publickey,password,hostbased).", "Too many authentication failures"]
    for need_pass in need_pass_err:
        if need_pass in error_msg:
            return True
    return False

def need_clean_host_id(error_msg):
    need_clean_err = ["WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!"]
    for need_clean in need_clean_err:
        if need_clean in error_msg:
            return True
    return False

def do_rsync_monitor(ip, username, local_obj=None):
    """
    Monitors the directory/file changes and performs rsync with the remote server.
    """
    remote_obj = None
    if local_obj == "lmao_rsync_prompt":
        local_obj = input("Local target: ").strip()
    else:
        obj = os.getcwd() if not local_obj else local_obj
        if ":" in obj:
            obj = obj.split(':')
            local_obj = obj[0]
            remote_obj = obj[1] if obj[1] else None

    if os.path.isdir(local_obj) and (not local_obj.endswith('/')):
        local_obj += '/'
    if not is_wildcard(local_obj) and not os.path.exists(local_obj):
        error_msg(f"Local target {local_obj} does not exist")
        exit(1)

    if remote_obj is None:
        remote_obj = input("Remote target: ").strip()

    if os.path.isdir(local_obj) or is_wildcard(local_obj):
        remote_obj = f"{username}@{ip}:{remote_obj}"
    else:
        filename = local_obj.split('/')[-1]
        remote_obj = f"{username}@{ip}:{remote_obj}/{filename}"

    print(f"Keep sync for {local_obj} --> {remote_obj}\n")

    class ChangeEventHandler(FileSystemEventHandler):
        def __init__(self):
            self.sync_timer = None
            self.delay_ms = 500 / 1000
            self.queued_event = False

        def _do_sync(self):
            try:
                print(f"Target change detected. Syncing...\n"
                      f" \\_ {local_obj} ===> {remote_obj}")
                ret = subprocess.run(["rsync", "-a", local_obj, remote_obj])
                print(f" \\_ Complete syncing. Return:{ret.returncode}\n")
            except subprocess.CalledProcessError as e:
                print(f" \\_ Error syncing: {e} \n")
            finally:
                self.sync_timer.cancel()
                self.sync_timer = None

        def on_any_event(self, event):
            if not event.is_directory:
                return None
            if not self.sync_timer:
                print(f"File change detected: {event.src_path}. Make timer...")
                self.sync_timer = Timer(self.delay_ms, self._do_sync)
                self.sync_timer.start()

    # Example usage
    observer = Observer()
    observer.schedule(ChangeEventHandler(), os.path.dirname(local_obj), recursive=True)
    observer.start()
    try:
      while True:
          time.sleep(600)
    except KeyboardInterrupt:
        print("Stopping observer...")
        observer.stop()
    observer.join()

def do_rsync_direct(ip, username, local_obj=None):
    """
    Monitors the directory/file changes and performs rsync with the remote server.
    """
    remote_obj = None
    if local_obj == "lmao_rsync_prompt":
        local_obj = input("Local target: ").strip()
    else:
        obj = os.getcwd() if not local_obj else local_obj
        if ":" in obj:
            obj = obj.split(':')
            local_obj = obj[0]
            remote_obj = obj[1] if obj[1] else None

    if os.path.isdir(local_obj) and (not local_obj.endswith('/')):
        local_obj += '/'
    if not is_wildcard(local_obj) and not os.path.exists(local_obj):
        error_msg(f"Local target {local_obj} does not exist")
        exit(1)

    if remote_obj is None:
        remote_obj = input("Remote target: ").strip()

    if os.path.isdir(local_obj) or is_wildcard(local_obj):
        remote_obj = f"{username}@{ip}:{remote_obj}"
    else:
        filename = local_obj.split('/')[-1]
        remote_obj = f"{username}@{ip}:{remote_obj}/{filename}"

    print(f"Doing sync for {local_obj} --> {remote_obj}\n")

    try:
        ret = subprocess.run(["rsync", "-a", remote_obj, local_obj])
        print(f" \\_ Complete syncing. Return:{ret.returncode}\n")
    except subprocess.CalledProcessError as e:
        print(f" \\_ Error syncing: {e} \n")

def do_ssh(ip, username, passwordless):
    # print("Perform SSH clean! ", cmd2) -- "ssh-keygen -f ~/.ssh/known_hosts -R " + ip
    # Do ssh passwordless login
    print(f"Prepare to login to {username}@{ip}.")
    ssh_cmd = f"ssh -o StrictHostKeyChecking=no {username}@{ip}"
    passwdless_cmd = f"ssh-copy-id {username}@{ip} && {ssh_cmd}"
    if passwordless:
        result = subprocess.run(passwdless_cmd, shell=True, stderr=subprocess.PIPE)
    else:
        result = subprocess.run(ssh_cmd, shell=True, stderr=subprocess.PIPE)
        if result.returncode != 0 and result.stderr and need_passwd(result.stderr.decode('utf-8')):
            print("Password still required. Perform no-password login. ")
            subprocess.run(passwdless_cmd, shell=True, stderr=subprocess.PIPE)

    if result.stderr and need_clean_host_id(result.stderr.decode('utf-8')):
        print(f"Clean up known host ID for {ip}.")
        known_hosts_path = "~/.ssh/known_hosts"
        clean_cmd = f"ssh-keygen -f {known_hosts_path} -R {ip}"
        subprocess.run(clean_cmd, shell=True, stderr=subprocess.PIPE)

    print(f"Stderr:\n {result.stderr.decode('utf-8')}" if result.stderr else "\nGood Bye !!!\n")

def exit_signal(signum, frame):
    exit(1)

def main():
    signal.signal(signal.SIGINT, exit_signal)

    parser = argparse.ArgumentParser(description="Lemon SSH terminal tool")
    # options
    parser.add_argument("-t", type=str, default=None,
                        help="Target machine. Could be name or number.")
    parser.add_argument("-s", action="store_true", default=False,
                        help="Print the current SSH processes.")
    parser.add_argument("-l", action="store_true", default=False,
                        help="Print the remote servers list.")
    parser.add_argument("-p", action="store_true", default=False,
                        help="Perform passwordless login.")
    parser.add_argument("-u", nargs="?", const='lmao_prompt', default="lmao_no_prompt",
                        help="Provide the user name to login.")
    parser.add_argument("-f", nargs="?", const='lmao_sftp_prompt', default="lmao_no_sftp",
                        help="Perform the sftp with path.")
    parser.add_argument("-r", nargs="?", const='lmao_rsync_prompt', default="lmao_no_rsync",
                        help="Perform rsync monitor in local file change. E.g. \"mssh -r local_obj:remote_obj\"")
    parser.add_argument("--sync", nargs="?", const='lmao_sync_prompt', default="lmao_no_sync",
                        help="Perform rsync directly to fetch the remote object. E.g. \"mssh --sync local_obj:remote_obj\"")
    # arguments
    parser.add_argument("host", default=None, nargs="?",
                        help="The IP address to process. <user>@<ip>, or <ip>")

    args = parser.parse_args()

    # print the current ssh processes and exit
    if args.s is True:
        os.system("ps axjf | grep -v 'grep' | grep 'python.*mssh' -A2")
        return

    # add host to SSH_HOSTS if not exists
    if args.host:
        add_custom_host(args.host)

    # get ip and user name
    ip = args.host if args.host else get_machine_ip(args.t, args.l)
    username = ip.split("@")[0] if "@" in ip else "root"
    ip = ip.split("@")[1] if "@" in ip else ip
    if args.u == "lmao_prompt":
        username = input("Please choose the username: [Lmao|Root|other]: ").strip()
        if username == "l" or username == "L":
            username = "lmao"
        elif username == "r" or username == "R" or username == "":
            username = "root"
    elif args.u != "lmao_no_prompt":
        username = args.u

    # do sftp/ssh/rsync
    if args.f != "lmao_no_sftp":
        do_sftp(ip, username, args.f)
    elif args.r != "lmao_no_rsync":
        do_rsync_monitor(ip, username, args.r)
    elif args.sync != "lmao_no_sync":
        do_rsync_direct(ip, username, args.sync)
    else:
        do_ssh(ip, username, args.p)

    return

if __name__ == "__main__":
    exit(main())
