#!/usr/bin/python3

import sys, os, signal
import argparse, argcomplete
import base64, json
import ssl
import xml.dom.minidom
import zlib

import mutil
import urllib.parse
# pip install colorama argcomplete 


def lssaml(args):
    saml_str = urllib.parse.unquote( args.saml_str )
    print("--:", saml_str)
    decoded_response = base64.b64decode(saml_str)
    try:
        xml_response = zlib.decompress(decoded_response, -zlib.MAX_WBITS).decode('utf-8')
    except zlib.error:
        xml_response = decoded_response.decode('utf-8')

    pretty_xml = xml.dom.minidom.parseString(xml_response).toprettyxml()
    print(mutil.pretty_print_xml(pretty_xml))

def lscrt(args):
    if os.path.exists(args.cert_str):
        tempfile = args.cert_str
    else:
        cert_str = args.cert_str.replace("\\n", '')
        decoded_cert = base64.b64decode(cert_str)
        pem = ssl.DER_cert_to_PEM_cert(decoded_cert)
        tempfile = "/tmp/temp_lt_saml_1234.txt"
        with open(tempfile, "w") as file:
            file.write(pem)
    cmd = f"openssl x509 -noout -text -in {tempfile} | less"
    os.system(cmd)

def lsjwt(args):
    """"""
    alg, jwt, signature = args.jwt_str.split(".")
    jwt = jwt.replace("%3D", "=")
    print("\n---- The decoded JWT:")
    print(json.loads(base64.b64decode(alg, altchars=b"-/")))
    jwt = base64.b64decode(jwt, altchars=b"-/")
    jwt = json.dumps(json.loads(jwt), indent=4, separators=(',', ':'), ensure_ascii=False)
    print(jwt)

def gitdiff(args):
    if args.commit:
        os.system(f"lt2 diff {args.commit}")
    else:
        os.system("lt2 diff")

def gitbranch(args):
    os.system("lt2 br")

def decompress(args):
    mutil.decompress(args.file)

def grepindir(args):
    path = args.dir
    file_type = args.type
    pattern = args.pattern

    if file_type:
        if file_type == 'c':
            file_type="-name '*.*[chp]'"
        elif file_type == 'py':
            file_type="-name '*.*[py]'"
        else:
            file_type=f"-name '{file_type}'"
    else:
        file_type=''

    cmd=f"find {path} -type f { file_type } | xargs grep -n '{ pattern }'"
    print(cmd)
    os.system(cmd)

# tool options
def parse_args():
    parser = argparse.ArgumentParser(prog='lt', description='Lemon tools')
    subparsers = parser.add_subparsers(title='subcommands', description='valid subcommands', help='additional help')

    # lt lssaml xxx
    saml_parser = subparsers.add_parser('lssaml', help='Decode an encoded SAML request/response')
    saml_parser.add_argument('saml_str', metavar='<saml_str>', help='The encoded SAML request string')
    saml_parser.set_defaults(func=lssaml)

    # lt lscrt xxx
    cert_parser = subparsers.add_parser('lscrt', help='Decode an x509 PEM certificate')
    cert_parser.add_argument('cert_str', metavar='<cert_str>', help='The encoded certificate string')
    cert_parser.set_defaults(func=lscrt)

    # lt lsjwt xxx
    jwt_parser = subparsers.add_parser('lsjwt', help='Decode an Isilon JWT string')
    jwt_parser.add_argument('jwt_str', metavar='<jwt_str>', help='The encoded isilon JWT string')
    jwt_parser.set_defaults(func=lsjwt)

    # lt diff xxx
    diff_parser = subparsers.add_parser('diff', help='Perform interactions with git diff')
    diff_parser.add_argument('commit', nargs='?', metavar='<commit>', help='The commit number we want to check')
    diff_parser.set_defaults(func=gitdiff)

    # lt gitbr
    gitbr_parser = subparsers.add_parser('gitbr', help='Perform interactions with git branch')
    gitbr_parser.set_defaults(func=gitbranch)

    # lt tar xxx
    tar_parser = subparsers.add_parser('tar', help='Decompress a compressed file.')
    tar_parser.add_argument("file", help="Path to the compressed file.")
    tar_parser.set_defaults(func=decompress)

    # lt grep
    grep_parser = subparsers.add_parser('grep', help='Grep string in directory.')
    grep_parser.add_argument("pattern", help="Pattern stands for the object.")
    grep_parser.add_argument("dir", help="Directory where to find the object.")
    grep_parser.add_argument("type", nargs='?', help="File type in dir.")
    grep_parser.set_defaults(func=grepindir)




    # auto complete
    argcomplete.autocomplete(parser)

    return parser.parse_args()

def main():
    args = parse_args()
    args.func(args)

if __name__ == "__main__":
    exit(main())


