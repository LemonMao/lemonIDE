#!/usr/bin/python3

import sys, os, signal
import argparse, argcomplete
import base64, json
import ssl
import xml.dom.minidom
import zlib

import mutil
import urllib.parse
# pip install colorama argcomplete


def lssaml(args):
    saml_str = urllib.parse.unquote( args.saml_str )
    print("--:", saml_str)
    decoded_response = base64.b64decode(saml_str)
    try:
        xml_response = zlib.decompress(decoded_response, -zlib.MAX_WBITS).decode('utf-8')
    except zlib.error:
        xml_response = decoded_response.decode('utf-8')

    pretty_xml = xml.dom.minidom.parseString(xml_response).toprettyxml()
    print(mutil.pretty_print_xml(pretty_xml))

def lsxml(args):
    xml_input = args.xml_input
    xml_content = ""
    if os.path.exists(xml_input):
        try:
            with open(xml_input, 'r', encoding='utf-8') as f:
                xml_content = f.read()
        except Exception as e:
            print(f"Error reading file {xml_input}: {e}")
            sys.exit(1)
    else:
        xml_content = xml_input

    if not xml_content:
        print("Error: XML input is empty.")
        sys.exit(1)

    try:
        # Remove potential Byte Order Mark (BOM) if present
        if xml_content.startswith('\ufeff'):
            xml_content = xml_content[1:]
        pretty_xml = xml.dom.minidom.parseString(xml_content).toprettyxml()
        print(mutil.pretty_print_xml(pretty_xml))
    except xml.parsers.expat.ExpatError as e:
        print(f"Error parsing XML: {e}")
        # Attempt to print raw if parsing fails but it looks like XML
        if xml_content.strip().startswith('<'):
             print("\n--- Raw XML Input (due to parsing error) ---")
             print(xml_content)
        sys.exit(1)
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        sys.exit(1)


def lscrt(args):
    if os.path.exists(args.cert_str):
        tempfile = args.cert_str
    else:
        cert_str = args.cert_str.replace("\n", '')
        decoded_cert = base64.b64decode(cert_str)
        pem = ssl.DER_cert_to_PEM_cert(decoded_cert)
        tempfile = "/tmp/temp_lt_saml_1234.txt"
        with open(tempfile, "w") as file:
            file.write(pem)
    cmd = f"openssl x509 -noout -text -in {tempfile} | less"
    os.system(cmd)

def lsjwt(args):
    """"""
    alg, jwt, signature = args.jwt_str.split(".")
    jwt = jwt.replace("%3D", "=")
    print("\n---- The decoded JWT:")
    print(json.loads(base64.b64decode(alg, altchars=b"-/")))
    jwt = base64.b64decode(jwt, altchars=b"-/")
    jwt = json.dumps(json.loads(jwt), indent=4, separators=(',', ':'), ensure_ascii=False)
    print(jwt)

def lsjwt2(args):
    jwt_str = args.jwt_str
    cmd = "jq -R 'split(\".\") | .[0],.[1] | @base64d | fromjson' <<< " + jwt_str
    os.system(cmd)

def urltool(args):
    url_str = args.url_str
    safe_chars = "/&=?+%:"
    if args.e:
        print(f"\nThe encoded URL:\n"
            f"------------\n{urllib.parse.quote(url_str, safe=safe_chars)}\n------------\n")
    if args.d:
        print(f"\nThe decoded URL:\n"
            f"------------\n{urllib.parse.unquote_plus(url_str)}\n------------\n")

def lsjson(args):
    """"""
    data = None
    if not args.json_str.startswith('{') and os.path.exists(args.json_str):
        with open(args.json_str, 'r') as f:
            json_content = f.read()
            data = json.loads(json_content)
    else:
        data = json.loads(args.json_str)

    if args.c:
        # cmd = "jq . | fromjson' <<< " + args.json_str
        cmd = f"echo '{data}' | jq ."
        os.system(cmd)
    else:
        print("\n---- The formatted Json:")
        jstr = json.dumps(data, indent=4, separators=(',', ':'), ensure_ascii=False)
        print(jstr)

def gitdiff(args):
    if args.commit:
        os.system(f"lt2 diff {args.commit}")
    else:
        os.system("lt2 diff")

def gitbranch(args):
    os.system("lt2 br")

def decompress(args):
    mutil.decompress(args.file)

def grepindir(args):
    path = args.dir
    file_type = args.type
    pattern = args.pattern

    if file_type:
        if file_type == 'c':
            file_type="-name '*.*[chp]'"
        elif file_type == 'py':
            file_type="-name '*.*[py]'"
        else:
            file_type=f"-name '{file_type}'"
    else:
        file_type=''

    cmd=f"find {path} -type f { file_type } | xargs grep -n -E '{ pattern }'"
    print(cmd)
    os.system(cmd)


def extract_logs(args):
    """Extract logs from a file within the specified time range."""
    from datetime import datetime, timezone
    import re

    # Parse time range
    time_range = args.time_range
    if '~' not in time_range:
        print("Error: Time range must be in format 'start~end'")
        sys.exit(1)

    start_str, end_str = time_range.split('~', 1)

    try:
        # Parse start and end times
        start_dt = datetime.fromisoformat(start_str).replace(tzinfo=timezone.utc)
        end_dt = datetime.fromisoformat(end_str).replace(tzinfo=timezone.utc)
    except ValueError as e:
        print(f"Error parsing time range: {e}")
        sys.exit(1)

    # Extract logs
    logs = mutil.extract_logs_by_time_range(args.log_file, start_dt, end_dt)

    # Print results
    for log in logs:
        print(log)

# tool options
def parse_args():
    parser = argparse.ArgumentParser(prog='lt', description='Lemon tools')
    subparsers = parser.add_subparsers(title='subcommands', description='valid subcommands', help='additional help')

    # lt lssaml xxx
    saml_parser = subparsers.add_parser('lssaml', help='Decode an encoded SAML request/response')
    saml_parser.add_argument('saml_str', metavar='<saml_str>', help='The encoded SAML request string')
    saml_parser.set_defaults(func=lssaml)

    # lt lscrt xxx
    cert_parser = subparsers.add_parser('lscrt', help='Decode an x509 PEM certificate')
    cert_parser.add_argument('cert_str', metavar='<cert_str>', help='The encoded certificate string')
    cert_parser.set_defaults(func=lscrt)

    # lt lsjwt xxx
    jwt_parser = subparsers.add_parser('lsjwt', help='Decode an Isilon JWT string')
    jwt_parser.add_argument('jwt_str', metavar='<jwt_str>', help='The encoded isilon JWT string')
    jwt_parser.set_defaults(func=lsjwt2)

    # lt lsjson xxx
    jwt_parser = subparsers.add_parser('lsjson', help='Format an json string')
    jwt_parser.add_argument('json_str', metavar='<json_str>', help='The original Json string')
    jwt_parser.add_argument("-c", action="store_true", default=False, help="Format json string with color")
    jwt_parser.set_defaults(func=lsjson)

    # lt lsxml xxx
    xml_parser = subparsers.add_parser('lsxml', help='Format an XML file or string')
    xml_parser.add_argument('xml_input', metavar='<xml_file_or_string>', help='The XML file path or XML string')
    xml_parser.set_defaults(func=lsxml)

    # lt diff xxx
    diff_parser = subparsers.add_parser('diff', help='Perform interactions with git diff')
    diff_parser.add_argument('commit', nargs='?', metavar='<commit>', help='The commit number we want to check')
    diff_parser.set_defaults(func=gitdiff)

    # lt gitbr
    gitbr_parser = subparsers.add_parser('gitbr', help='Perform interactions with git branch')
    gitbr_parser.set_defaults(func=gitbranch)

    # lt untar xxx
    untar_parser = subparsers.add_parser('untar', help='Decompress a compressed file.')
    untar_parser.add_argument("file", help="Path to the compressed file.")
    untar_parser.set_defaults(func=decompress)

    # lt grep
    grep_parser = subparsers.add_parser('grep', help='Grep string in directory.')
    grep_parser.add_argument("pattern", help="Pattern stands for the object.")
    grep_parser.add_argument("dir", help="Directory where to find the object.")
    grep_parser.add_argument("type", nargs='?', help="File type in dir.")
    grep_parser.set_defaults(func=grepindir)

    # lt log
    log_parser = subparsers.add_parser('log', help='Extract logs from a file within a time range.')
    log_parser.add_argument("time_range", help="Time range in format 'start~end' (e.g., '2025-08-06T21:04:02~2025-08-06T21:04:03')")
    log_parser.add_argument("log_file", help="Path to the log file")
    log_parser.set_defaults(func=extract_logs)

    # lt url -e/-d
    url_parser = subparsers.add_parser('url', help='Do URL encode/decode.')
    url_parser.add_argument('url_str', metavar='<url_str>', help='URL string which will be encoded/decoded.')
    url_parser.add_argument("-e", action="store_true", default=False, help="Do URL encode.")
    url_parser.add_argument("-d", action="store_true", default=False, help="Do URL decode.")
    url_parser.set_defaults(func=urltool)

    # auto complete
    argcomplete.autocomplete(parser)

    if not hasattr(parser.parse_args(), 'func'):
        parser.print_help()
        exit(1)

    return parser.parse_args()

def main():
    args = parse_args()
    args.func(args)

if __name__ == "__main__":
    exit(main())
