# Specify the language this format applies to.
# 指定此格式应用于的语言。
Language: Cpp
# Base the style on LLVM, a widely used style guide, and then customize.
# 基于 LLVM 风格（一个广泛使用的风格指南），然后进行自定义。
BasedOnStyle: Google
# Set the width for indentation to 4 spaces.
# 设置缩进宽度为 4 个空格。
IndentWidth: 4
# Never use tabs for indentation; always use spaces.
# 从不使用 Tab 进行缩进；始终使用空格。
UseTab: Never
# Although tabs are not used (UseTab: Never), define tab width for alignment purposes if needed elsewhere.
# 虽然不使用 Tab (UseTab: Never)，但为其他可能的对齐目的定义 Tab 宽度。
TabWidth: 4
# Allman style: Braces always go on the next line after functions, namespaces, control statements, etc.
# Allman 风格：大括号总是在函数、命名空间、控制语句等之后的下一行开始。
# Example:
# void func()
# {
#   ...
# }
BreakBeforeBraces: Allman
# Do not allow short 'if' statements on a single line without braces.
# 不允许将短的 'if' 语句放在单行上（没有大括号）。
# Example: if (foo) return; ->
# if (foo) {
#   return;
# }
AllowShortIfStatementsOnASingleLine: false
# Do not allow short loops on a single line without braces.
# 不允许将短的循环语句放在单行上（没有大括号）。
# Example: while (true) continue; ->
# while (true) {
#   continue;
# }
AllowShortLoopsOnASingleLine: false
# Do not allow short functions to be defined on a single line.
# 不允许将短函数定义在单行上。
# Example: void f() { bar(); } ->
# void f()
# {
#   bar();
# }
AllowShortFunctionsOnASingleLine: false
# Align pointer operators ('*' and '&') to the right, next to the variable name.
# 将指针运算符（'*' 和 '&'）右对齐，紧邻变量名。
# Example: int* ptr; -> int *ptr;
PointerAlignment: Right
# Set the maximum line length to 80 characters. Lines longer than this will be wrapped.
# 设置最大行长度为 80 个字符。超过此长度的行将被换行。
ColumnLimit: 80
# Indent access modifiers (public:, private:, protected:) relative to the class indentation level. -4 means indent them back one level (4 spaces).
# 相对于类的缩进级别来缩进访问修饰符（public:, private:, protected:）。-4 表示将它们向后缩进一级（4个空格）。
# Example:
# class MyClass {
# private:
#   int member;
# };
AccessModifierOffset: -4
# Apply indentation rules to all nested namespaces.
# 将缩进规则应用于所有嵌套的命名空间。
NamespaceIndentation: All
# Set the indentation width for continuation lines (lines that wrap) to 4 spaces.
# 设置续行（换行后的行）的缩进宽度为 4 个空格。
ContinuationIndentWidth: 4
# Add a space before parentheses only in control flow statements (if, for, while, switch, catch).
# 仅在控制流语句（if, for, while, switch, catch）的括号前添加空格。
# Example: if(foo) -> if (foo), but func(arg) remains func(arg)
SpaceBeforeParens: ControlStatements
# Do not put spaces inside parentheses.
# 不要在括号内放置空格。
# Example: func( arg1, arg2 ) -> func(arg1, arg2)
SpacesInParentheses: false
# Do not put spaces inside angle brackets (template parameters).
# 不要在尖括号内（模板参数）放置空格。
# Example: std::vector< T > -> std::vector<T>
SpacesInAngles: false
# Do not put a space after a C-style cast.
# 不要在 C 风格的类型转换后放置空格。
# Example: (int) x -> (int)x
SpaceAfterCStyleCast: false
# Do not put a space after the logical 'not' operator (!).
# 不要在逻辑 '非' 运算符 (!) 后放置空格。
# Example: ! foo -> !foo
SpaceAfterLogicalNot: false
# Put spaces before assignment operators (=, +=, -=, etc.).
# 在赋值运算符（=, +=, -= 等）之前放置空格。
# Example: x=y; -> x = y;
SpaceBeforeAssignmentOperators: true
# Do not sort #include directives automatically. Keep the original order.
# 不要自动排序 #include 指令。保持原始顺序。
SortIncludes: false
# Remove empty lines at the beginning of blocks {}.
# 移除代码块 {} 开头的空行。
KeepEmptyLinesAtTheStartOfBlocks: false
# Enable formatting for C++11 braced initializer lists. This often includes adding a space before the opening brace.
# 启用 C++11 花括号初始化列表的格式化。这通常包括在左花括号前添加空格。
# Example: std::vector<int> v{1, 2}; -> std::vector<int> v{ 1, 2 }; (behavior depends on other settings too)
# The provided code uses `ciam_saml_sp_cfg spcfg{zid};`, which doesn't have spaces, so this might need adjustment based on exact behavior, but `true` is common.
Cpp11BracedListStyle: true
# Ensure there is a space before a C++11 braced list {}.
# 确保在 C++11 花括号列表 {} 之前有一个空格。
# Example: int x[]{1, 2}; -> int x[] {1, 2}; (Works with Cpp11BracedListStyle: true)
SpaceBeforeCpp11BracedList: true
